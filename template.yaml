AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  flask-aws-lambda-api

  Sample SAM Template for flask-aws-lambda-api

Globals:
  Function:
    Timeout: 20
    MemorySize: 256

Resources:
  FlaskLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: flask-layer
      Description: Layer for Flask and dependencies v1.0.0
      ContentUri: lambda-layers/flask-layer
      CompatibleRuntimes:
        - python3.9
      RetentionPolicy: Retain
  FlaskApi:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: src.lambda_handler.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Layers:
        - !Ref FlaskLayer
      Events:
        HealthCheckApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /health
            Method: get
            Auth:
              ApiKey: true
        GetProduct:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /products/{id}
            Method: get
            Auth:
              ApiKey: true
            RequestParameters:
              method.request.path.id: true
        UpdateProduct:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /products/{id}
            Method: patch
            Auth:
              ApiKey: true
            RequestModel:
              Model: ProductUpdateModel
              ValidateBody: true
        CreateProduct:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /products
            Method: post
            Auth:
              ApiKey: true
            RequestModel:
              Model: ProductCreateModel
              ValidateBody: true
        GetAllProducts:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /products
            Method: get
            Auth:
              ApiKey: true
        DeleteProduct:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /products/{id}
            Method: delete
            Auth:
              ApiKey: true
            RequestParameters:
              method.request.path.id: true
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
                - ssm:GetParameters
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
              Resource:
                - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/flask-api/config'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/products'
  ErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Lambda function error rate > 1%
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanThreshold

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    DependsOn: ApiGatewayAccount
    Properties:
      StageName: Prod
      Models:
        ProductCreateModel:
          type: object
          contentType: application/json
          schema: ${file(src/schemas/products/create.json)}
        ProductUpdateModel:
          type: object
          contentType: application/json
          schema: ${file(src/schemas/products/update.json)}
      Auth:
        ApiKeyRequired: true
      Cors:
        AllowMethods: "'GET,POST,PATCH,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Api-Key,Authorization'"
        AllowOrigin: "'*'"
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          ThrottlingBurstLimit: 100
          ThrottlingRateLimit: 50
  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: DefaultApiKey
      Description: API Key creada desde template.yaml
      Enabled: true

  ApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: ApiGatewayApiProdStage
    Properties:
      UsagePlanName: BasicUsagePlan
      Description: Basic usage plan for my API
      ApiStages:
        - ApiId: !Ref ApiGatewayApi
          Stage: Prod
      Quota:
        Limit: 5000
        Period: MONTH
      Throttle:
        BurstLimit: 100
        RateLimit: 50

  ApiKeyUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan

  ApiGatewayCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchRole.Arn

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  FlaskApiFunction:
    Description: "Flask API Lambda Function ARN"
    Value: !GetAtt FlaskApi.Arn
  FlaskApiRole:
    Description: "IAM Role created for Flask API function"
    Value: !GetAtt FlaskApi.Arn
