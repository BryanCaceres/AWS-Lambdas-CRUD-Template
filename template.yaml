AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  CRUD API In AWS Lambda - Microservices Architecture
  
  Sample SAM Template for CRUD API In AWS Lambda using DynamoDB as database with independent lambdas

Globals:
  Function:
    Timeout: 20
    MemorySize: 256
    Environment:
      Variables:
        POWERTOOLS_SERVICE_NAME: products-api
        LOG_LEVEL: INFO

Resources:
  CustomLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: CustomLambdaLayer
      Description: Custom Lambda Layer with utilities
      ContentUri: lambda-layers/common/
      CompatibleRuntimes:
        - python3.9
      RetentionPolicy: Retain

  CreateProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/create
      Handler: create_handler.lambda_handler
      Runtime: python3.9
      Layers:
        - !Ref CustomLambdaLayer
      Policies:
        - !Ref ProductsFunctionPolicy
      Events:
        CreateProduct:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /products
            Method: post
            Auth:
              ApiKey: true
            RequestModel:
              Model: ProductCreateModel
              ValidateBody: true

  GetProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/get/get_by_pk
      Handler: get_by_pk_handler.lambda_handler
      Runtime: python3.9
      Layers:
        - !Ref CustomLambdaLayer
      Policies:
        - !Ref ProductsFunctionPolicy
      Events:
        GetProduct:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /products/{primary_key}
            Method: get
            Auth:
              ApiKey: true
            RequestParameters:
              method.request.path.primary_key: true

  GetAllProductsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/get/get_all
      Handler: get_handler.lambda_handler
      Runtime: python3.9
      Layers:
        - !Ref CustomLambdaLayer
      Policies:
        - !Ref ProductsFunctionPolicy
      Events:
        GetAllProducts:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /products
            Method: get
            Auth:
              ApiKey: true

  UpdateProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/update
      Handler: update_handler.lambda_handler
      Runtime: python3.9
      Layers:
        - !Ref CustomLambdaLayer
      Policies:
        - !Ref ProductsFunctionPolicy
      Events:
        UpdateProduct:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /products/{primary_key}
            Method: patch
            Auth:
              ApiKey: true
            RequestModel:
              Model: ProductUpdateModel
              ValidateBody: true
            

  DeleteProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/delete
      Handler: delete_handler.lambda_handler
      Runtime: python3.9
      Layers:
        - !Ref CustomLambdaLayer
      Policies:
        - !Ref ProductsFunctionPolicy
      Events:
        DeleteProduct:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /products/{primary_key}
            Method: delete
            Auth:
              ApiKey: true
            RequestParameters:
              method.request.path.primary_key: true

  ProductsFunctionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:Scan
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/products'

  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: ProductsApiKey
      Description: API Key for Products API
      Enabled: true

  ApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: ApiGatewayApiProdStage
    Properties:
      UsagePlanName: ProductsApiUsagePlan
      Description: Usage plan for Products API
      ApiStages:
        - ApiId: !Ref ApiGatewayApi
          Stage: Prod
      Quota:
        Limit: 5000
        Period: MONTH
      Throttle:
        BurstLimit: 100
        RateLimit: 50

  ApiKeyUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        ApiKeyRequired: true
      Cors:
        AllowMethods: "'GET,POST,PATCH,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Api-Key,Authorization'"
        AllowOrigin: "'*'"
      Models:
        ProductCreateModel:
          schema: "http://json-schema.org/draft-04/schema#"
          title: "ProductCreateModel"
          type: object
          required:
            - name
            - price
          properties:
            name:
              type: string
              minLength: 2
              maxLength: 150
              description: "Product name"
            price:
              type: integer
              minimum: 10
              maximum: 1000000
              description: "Product price in dollars"
          additionalProperties: false
        ProductUpdateModel:
          type: object
          required:
            - name
            - price
          properties:
            name:
              type: string
              minLength: 2
              maxLength: 150
              description: "Product name"
            price:
              type: integer
              minimum: 1
              maximum: 1000000
              description: "Product price in dollars"
          additionalProperties: false

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  
  ApiKey:
    Description: "API Key ID for authentication"
    Value: !Ref ApiKey
  
